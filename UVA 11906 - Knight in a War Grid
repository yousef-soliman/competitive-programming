#include <iostream>
#include <string>
#include <cstdio>
#include <map>
#include <algorithm>
#include <stack>
#include <queue>
#include <sstream>
#include <utility>
#include <cmath>
#include <bitset>
#include <cstring>
#include <utility>
#include <set>
#include <cctype>
#include <list>
#include <climits>
#include <cstdlib>
#define ii pair<int,int>
#define psi pair<string,int>
#define vi vector<int>
#define vvi vector <vector<int> >
#define vvc vector <vector<char> >
#define vs vector<string>
#define vl vector<long long>
#define vii vector<ii>
#define mp make_pair
#define gl(s) getline(cin , s)
#define max3(x, y, z) max(x,max(y,z))  
#define min3(x, y, z) min(x,min(y,z))
#define mmx INT_MAX 
#define mmn INT_MIN
typedef long long ll;
int dr[] = {1, 2 , -1, 2, -2, -2, 1, -1};
int dc[] = {2, 1, 2, -1, 1, -1, -2, -2};

using namespace std;
int R,C;
int N,M;
int cntE  = 0;
int cntO  = 0;
int a[101][101] = {0};
int vis[101][101] = {0};
int vis2[101][101] = {0};
int dfs(int r,int c) {
	if(r < 0 || r >= R || c < 0 || c >= C) return 0;
	if(a[r][c] == -1) return 0;
	int cnt = 0;
	if(!vis[r][c]) {
		vis[r][c] = 1;
		if(N == 0 || M == 0) {
			cnt += dfs(r+N,c+M); 
			cnt += dfs(r-N,c-M);
			cnt += dfs(r+M,c+N); 
			cnt += dfs(r-M,c-N);
		} else if( M == N) {
			cnt += dfs(r+N,c+M); 
			cnt += dfs(r-N,c-M);
			cnt += dfs(r-M,c+N); 
			cnt += dfs(r+M,c-N);
		}
		else {
			cnt += dfs(r+N,c+M); 
			cnt += dfs(r+N,c-M); 
			cnt += dfs(r-N,c+M); 
			cnt += dfs(r-N,c-M);
			cnt += dfs(r+M,c+N); 
			cnt += dfs(r+M,c-N); 
			cnt += dfs(r-M,c+N); 
			cnt += dfs(r-M,c-N);
		}
		if(cnt % 2 == 0){
			cntE++;
		}
		else cntO++;
	}
	return 1;
}
int main(){	
	int T,t = 0;
	int x,y;
	cin >> T;
	int w;
	while(T--) {
		cntE = 0;
		cntO = 0;
		t++;
		cin >> R >> C >> N >> M;
		cin >> w;
		while(w--) {
			cin >> x >> y;
			a[x][y] = -1;
		}
		dfs(0,0);
		memset(a,0,sizeof(a));
		memset(vis,0,sizeof(vis));
		printf("Case %d: %d %d\n",t,cntE,cntO);
	}
	return 0;
}
