#include <iostream>
#include <string>
#include <cstdio>
#include <map>
#include <algorithm>
#include <stack>
#include <queue>
#include <sstream>
#include <utility>
#include <cmath>
#include <bitset>
#include <cstring>
#include <utility>
#include <set>
#include <cctype>
#include <list>
#include <climits>
#include <cstdlib>
#define ii pair<int,int>
#define psi pair<string,int>
#define vi vector<int>
#define vvi vector <vector<int> >
#define vvc vector <vector<char> >
#define vs vector<string>
#define vl vector<long long>
#define vii vector<ii>
#define mp make_pair
#define gl(s) getline(cin , s)
#define max3(x, y, z) max(x,max(y,z))  
#define min3(x, y, z) min(x,min(y,z))
#define mmx INT_MAX 
#define mmn INT_MIN
typedef long long ll;
using namespace std;
int dr[] = { 0,1,-1,0};
int dc[] = { 1,0,0,-1};
vs rc;
bool vis[101][101] = {0};
int N ,M;

int floodfill(int r,int c,char c1) {
	if(r < 0 || r >= N || c < 0 || c >= M || vis[r][c]) return 0;
	if(rc[r][c] != c1) return 0;
	int ans = 1;
	rc[r][c] = '.';
	vis[r][c] = 1;
	for(int i = 0;i < 4; i++) {
		ans += floodfill(r+dr[i],c + dc[i],c1);
	}
	return ans;
}
bool sortby(pair<char,int> i,pair<char,int> j){
	if(i.second > j.second){
		return true;
	}
	else if(i.second < j.second){
		return false;
	}
	else {
		if(j.first < j.first){
			return true;
		}
		else if(i.first > j.first){
			return false;
		}
	}
} 
int main(){	
	int T;
	cin >> T;
	int t = 0;
	while(T--) {
		t++;
		cin >> N >> M;
		getchar();
		string s;
		for(int i = 0;i < N; i++) {
			gl(s);
			rc.push_back(s);
		}
		vs tmp;
		map <char, int> mc;
		tmp = rc;
		for(int i = 0;i < N; i++) {
			for(int j = 0;j < M; j++) {
				if(floodfill(i,j,rc[i][j])) {
					mc[tmp[i][j]]++;
				}
			}
		}
		map <char, int>::iterator it;
		vii sorted;
		for(it = mc.begin();it!=mc.end();it++){
			sorted.push_back(*it);
		}
		sort(sorted.begin(),sorted.end(),sortby);
		printf("World #%d\n",t);
		for(int i = 0;i < sorted.size();i++){
			printf("%c: %d\n",sorted[i].first,sorted[i].second);
		}
		rc.clear();
		memset(vis,0,sizeof(vis));
	}
	
	
	return 0;
}




