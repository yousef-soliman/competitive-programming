#include <iostream>
#include <string>
#include <cstdio>
#include <map>
#include <algorithm>
#include <stack>
#include <queue>
#include <sstream>
#include <utility>
#include <cmath>
#include <bitset>
#include <cstring>
#include <utility>
#include <set>
#include <cctype>
#include <list>
#include <climits>
#include <cstdlib>
#define ii pair<int,int>
#define psi pair<string,int>
#define vi vector<int>
#define vvi vector <vector<int> >
#define vvc vector <vector<char> >
#define vs vector<string>
#define vl vector<long long>
#define vii vector<ii>
#define mp make_pair
#define gl(s) getline(cin , s)
#define max3(x, y, z) max(x,max(y,z))  
#define min3(x, y, z) min(x,min(y,z))
#define mmx INT_MAX 
#define mmn INT_MIN
#define all(v) v.begin(),v.end()
typedef long long ll;
int dr_k[] = {1, 2 , -1, 2, -2, -2, 1, -1};
int dc_k[] = {2, 1, 2, -1, 1, -1, -2, -2};

using namespace std;
int dr[] = {1, -1, 0, 0, 1, 1, -1, -1};
int dc[] = {0, 0, 1, -1, 1, -1, 1, -1};
class UnoinFind {
	private:
		vi p,rank;
	public:
		UnoinFind(int N) {
			rank.assign(N,0);
			for(int i = 0; i < N; i++) {
				p.push_back(i);
			}
		}
		~UnoinFind() {
			p.clear();
			rank.clear();
		}
		int findSet(int i){
			return ((p[i] == i)? i:p[i] = findSet(p[i]));
		}
		bool isSame(int i,int j){
			return findSet(i) == findSet(j);
		}
		void Union(int i,int j){
			int x = findSet(i);
			int y = findSet(j);
			if(x != y){
				if(rank[x] > rank[y]){
					p[y] = x;
				}
				else{
					p[x] = y;
					if(rank[x] == rank[y]){
						rank[y]++;
					}
					
				}
			}
		}
};
int main(){	
	int N;
	int k,M;
	vector<pair<int,ii> > g;
	int t = 0;
	while(cin >> N){
		if(t) cout << endl;
		t++;
		int mn = 0;
		int x,y,w;
		for(int i = 0; i < N-1; i++) {
			cin >> x >> y >> w;
			g.push_back(mp(w,mp(x-1,y-1)));
		}
		sort(all(g));
		UnoinFind uf(N);
		for(int i = 0; i < g.size(); i++){
			pair<int ,ii> p = g[i];		
			if(!uf.isSame(p.second.first,p.second.second)){
				mn+=p.first;
				uf.Union(p.second.first,p.second.second);
			}
		}
		cout << mn << endl;
		cin >> k;
		g.clear();
		mn = 0;
		for(int i = 0; i < k; i++) {
			cin >> x >> y >> w;
			g.push_back(mp(w,mp(x-1,y-1)));
		}
		cin >> M;
		for(int i = 0; i < M; i++) {
			cin >> x >> y >> w;
			g.push_back(mp(w,mp(x-1,y-1)));
		}
		sort(all(g));
		UnoinFind u(M+k);
		for(int i = 0; i < g.size(); i++){
			pair<int ,ii> p = g[i];			
			if(!u.isSame(p.second.first,p.second.second)){
				mn+=p.first;
				u.Union(p.second.first,p.second.second);
			}
		}
		cout << mn << endl;
		g.clear();
		
		
	}
	return 0;
}
