#include <iostream>
#include <string>
#include <cstdio>
#include <map>
#include <algorithm>
#include <stack>
#include <queue>
#include <sstream>
#include <utility>
#include <cmath>
#include <bitset>
#include <cstring>
#include <utility>
#include <set>
#include <cctype>
#include <list>
#include <climits>
#include <cstdlib>
#define ii pair<int,int>
#define psi pair<string,int>
#define vi vector<int>
#define vvi vector <vector<int> >
#define vvc vector <vector<char> >
#define vs vector<string>
#define vl vector<long long>
#define vii vector<ii>
#define mp make_pair
#define gl(s) getline(cin , s)
#define max3(x, y, z) max(x,max(y,z))  
#define min3(x, y, z) min(x,min(y,z))
#define mmx INT_MAX 
#define mmn INT_MIN
typedef long long ll;
int dr[] = {1, 2 , -1, 2, -2, -2, 1, -1};
int dc[] = {2, 1, 2, -1, 1, -1, -2, -2};

using namespace std;
vvi graph;
vi color;
set<int> t0,t1;
bool Bipartite(int u) {
	for(int i = 0; i < graph[u].size();i++) {
		int v = graph[u][i];
		if(color[v] == -1) {
			color[v] = 1 -color[u];
			if(color[v]){
				t1.insert(v);
			}
			else{
				t0.insert(v);
			}
			if(!Bipartite(v)) {
				return false;
			}
		}
		else if(color[v] == color[u]) {
			return false;
		}
	}
	return true;
}
int main(){	
	int T, N, M, x, y;
	cin >> T;
	while(T--) {
		cin >> N >> M;
		graph.resize(N);
		color.assign(N,-1);
		for(int i= 0; i < M; i++) {
			cin >> x >> y;
			graph[x].push_back(y);
			graph[y].push_back(x);
		}
		int res = 0;
		bool f = 1;
		int cnt = 0;
		for(int i = 0;i < N && f;i++) {
			if(graph[i].size() == 0){
				cnt++;
				continue;
			}
			if(color[i] == -1){
				color[i] = 0;
				t0.insert(i);
				f = Bipartite(i);
				cnt += min(t0.size(),t1.size());
				t0.clear();
				t1.clear();
			}
			
		}
		if(!f) {
			cout << -1 << endl;
		}
		else
		cout<<cnt << endl;
		graph.clear();
		
		
	}
	
	return 0;
}
