#include <iostream>
#include <string>
#include <cstdio>
#include <map>
#include <algorithm>
#include <stack>
#include <queue>
#include <sstream>
#include <utility>
#include <cmath>
#include <bitset>
#include <cstring>
#include <utility>
#include <set>
#include <cctype>
#include <list>
#include <climits>
#include <cstdlib>
#define ii pair<int,int>
#define psi pair<string,int>
#define vi vector<int>
#define vvi vector <vector<int> >
#define vvc vector <vector<char> >
#define vs vector<string>
#define vl vector<long long>
#define vii vector<ii>
#define mp make_pair
#define gl(s) getline(cin , s)
#define max3(x, y, z) max(x,max(y,z))  
#define min3(x, y, z) min(x,min(y,z))
#define mmx INT_MAX 
#define mmn INT_MIN
#define all(v) v.begin(),v.end()
typedef long long ll;
int dr_k[] = {1, 2 , -1, 2, -2, -2, 1, -1};
int dc_k[] = {2, 1, 2, -1, 1, -1, -2, -2};
int dr[] = {-1, 0, 0, 1, 1, 1, -1, -1};
int dc[] = {0, -1, 1, 0, 1, -1, 1, -1};
using namespace std;
vector<char> vc;
vvi g;
vi vis;
map<char,int> m;
bool isValid(int j){
	for(int i = 0; i < g[j].size();i++){
		int v = g[j][i];
		if(vis[v]) return 0;
	}
	return 1;
}
void backtrack(string s){
	if(s.size() == vc.size()) {
		cout << s <<endl;
	}
	for(int i = 0;i < vc.size();i++) {
		if(!vis[i]) {
			if(isValid(i)){
				vis[i] = 1;
				backtrack(s+vc[i]);
				vis[i] = 0;
			}
		}
	}
}
int main(){	
	string s;
	bool t = 0;
	while(gl(s)){
		if (t){
			cout << endl;
		}
		t = 1;
		stringstream ss;
		sort(all(s));
		ss << s;
		char c,c1;
		int cn = 0;
		while (ss >> c){
			vc.push_back(c);
			m[c] = cn++;
		}
		g.resize(vc.size());
		vis.assign(vc.size(),0);
		ss.clear();
		gl(s);
		ss << s;
		while(ss >> c >> c1){
			g[m[c]].push_back(m[c1]);
		}
		backtrack("");
		vc.clear();
		m.clear();
		g.clear();
	}
	return 0;
}
