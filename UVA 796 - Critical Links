#include <iostream>
#include <string>
#include <cstdio>
#include <map>
#include <algorithm>
#include <stack>
#include <queue>
#include <sstream>
#include <utility>
#include <cmath>
#include <bitset>
#include <cstring>
#include <utility>
#include <set>
#include <cctype>
#include <list>
#include <climits>
#include <cstdlib>
#define ii pair<int,int>
#define psi pair<string,int>
#define vi vector<int>
#define vvi vector <vector<int> >
#define vvc vector <vector<char> >
#define vs vector<string>
#define vl vector<long long>
#define vii vector<ii>
#define mp make_pair
#define gl(s) getline(cin , s)
#define max3(x, y, z) max(x,max(y,z))  
#define min3(x, y, z) min(x,min(y,z))
#define mmx INT_MAX 
#define mmn INT_MIN
typedef long long ll;
int dr[] = {1, 2 , -1, 2, -2, -2, 1, -1};
int dc[] = {2, 1, 2, -1, 1, -1, -2, -2};

using namespace std;
vvi g;
vi vis;
vi low;
vi parent;
int cnt;
int c;
vii res;
void dfs(int u){
	low[u] = vis[u] = cnt++;
	for(int i = 0; i < g[u].size(); i++) {
		int v = g[u][i];
		if(vis[v] == -1){
			parent[v] = u;
			dfs(v);
			if(low[v] > vis[u]){
				if(u < v)
					res.push_back(mp(u,v));
				else
					res.push_back(mp(v,u));
			}
			low[u] = min(low[u],low[v]);
		}
		if(v != parent[u]){
			low[u] = min(low[u],vis[v]);
		}
	}
}
int main(){	
	int N;
	while(cin >> N) {
		c = 0;
		cnt= 0;
		g.resize(N);
		vis.assign(N,-1);
		low.assign(N,0);
		parent.assign(N,0);
		int x,n,y;
		for(int i= 0;i < N; i++){
			scanf("%d (%d)",&x,&n);
			for(int j = 0;j <n; j++) {
				cin >> y;
				g[x].push_back(y);
				
			}
		}
		for(int i= 0;i < N; i++){
			if(vis[i] == -1) {
				dfs(i);
			}
		}
		printf("%d critical links\n",res.size());
		sort(res.begin(),res.end());
		for(int i= 0;i < res.size(); i++){
				printf("%d - %d\n",res[i].first,res[i].second);
		}
		cout << endl;
		res.clear();
		g.clear();
		
	}
	return 0;
}
