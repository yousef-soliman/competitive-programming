#include <iostream>
#include <string>
#include <cstdio>
#include <map>
#include <algorithm>
#include <stack>
#include <queue>
#include <sstream>
#include <utility>
#include <cmath>
#include <bitset>
#include <cstring>
#include <utility>
#include <set>
#include <cctype>
#include <list>
#include <climits>
#include <cstdlib>
#define ii pair<int,int>
#define psi pair<string,int>
#define vi vector<int>
#define vvi vector <vector<int> >
#define vvc vector <vector<char> >
#define vs vector<string>
#define vl vector<long long>
#define vii vector<ii>
#define mp make_pair
#define gl(s) getline(cin , s)
#define max3(x, y, z) max(x,max(y,z))  
#define min3(x, y, z) min(x,min(y,z))
#define mmx INT_MAX 
#define mmn INT_MIN
typedef long long ll;
int dr[] = {1, 2 , -1, 2, -2, -2, 1, -1};
int dc[] = {2, 1, 2, -1, 1, -1, -2, -2};

using namespace std;

vvi graph;
vi indegree;
vi toporder;

void toplogicalBFS() {
	priority_queue<int> q;
	for(int i = 0; i < indegree.size(); i++) {
		if(indegree[i] == 0) {
			q.push(-1*i);
		}
	}
	while(!q.empty()) {
		int u = -1*q.top();
		q.pop();
		toporder.push_back(u);
		for(int i = 0;i < graph[u].size();i++) {
			int v = graph[u][i];
			if(--indegree[v] == 0) {
				q.push(-1*v);
			}
		}
	}
}
int main(){	
	int N,M;
	int t = 0;
	while(cin >> N) {
		t++;
		map <string,int > m;
		map <int,string> m2;
		string s,s1;
		for(int i = 0; i < N ;i++) {
			cin >> s;
			m[s] = i;
			m2[i] = s;
		}
		graph.resize(N);
		indegree.assign(N,0);
		cin >> M;
		for(int i = 0; i < M; i++) {
			cin >> s >> s1;
			graph[m[s]].push_back(m[s1]);
			indegree[m[s1]]++;
		}
		//for(int i = 0;i < graph.size();i++){
			//cout  << i<< ": ";
			//for(int j = 0;j < graph[i].size();j++){
				//cout<< graph[i][j] << " ";
			//}
			//cout << endl;
		//}
		toplogicalBFS();
		
		printf("Case #%d: Dilbert should drink beverages in this order:",t);
		for(int i = 0; i < toporder.size();i++) {
				int d = toporder[i];
				cout << " " << m2[d] ;
		}
		cout <<"."<< endl;
		cout << endl;
		toporder.clear();
		graph.clear();
		
	}
	
	return 0;
}
