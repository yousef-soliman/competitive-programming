#include <iostream>
#include <string>
#include <cstdio>
#include <map>
#include <algorithm>
#include <stack>
#include <queue>
#include <sstream>
#include <utility>
#include <cmath>
#include <bitset>
#include <cstring>
#include <utility>
#include <set>
#include <cctype>
#include <list>
#include <climits>
#include <cstdlib>
#define ii pair<int,int>
#define psi pair<string,int>
#define vi vector<int>
#define vvi vector <vector<int> >
#define vvc vector <vector<char> >
#define vs vector<string>
#define vl vector<long long>
#define vii vector<ii>
#define mp make_pair
#define gl(s) getline(cin , s)
#define max3(x, y, z) max(x,max(y,z))  
#define min3(x, y, z) min(x,min(y,z))
#define mmx INT_MAX 
#define mmn INT_MIN
typedef long long ll;
int dr[] = {0, 0 , 1, -1, 1, -1, 1, -1};
int dc[] = {1, -1, 0, 0, 1, -1, -1, 1};

using namespace std;
vvi graph;
vi color;
bool isBipartite(int u) {
	for(int i = 0; i < graph[u].size();i++) {
		int v = graph[u][i];
		if(color[v] == -1) {
			color[v] = 1 - color[u];
			return isBipartite(v);
		}
		else if(color[u] == color[v]){
			return false;
		}
	}
	return true;
}
int main(){	
	int N,M;
	int x,y;
	while(cin >> N && N) {
		cin >> M;
		graph.resize(N);
		color.assign(N,-1);
		for(int i = 0;i < M; i++) {
			cin >> x >> y;
			graph[x].push_back(y);
			graph[y].push_back(x);
		}
		color[0] = 0;
		cout << ((isBipartite(0))? "BICOLORABLE.":"NOT BICOLORABLE.")<< endl;
		graph.clear();
	}
	
	return 0;
}




