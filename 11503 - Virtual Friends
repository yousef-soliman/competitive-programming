#include <iostream>
#include <string>
#include <cstdio>
#include <map>
#include <algorithm>
#include <stack>
#include <queue>
#include <sstream>
#include <utility>
#include <cmath>
#include <bitset>
#include <cstring>
#include <utility>
#include <set>
#include <cctype>
#include <list>
#include <climits>
#define ii pair<int,int>
#define psi pair<string,int>
#define vi vector<int>
#define vvi vector <vector<int> >
#define vvc vector <vector<char> >
#define vs vector<string>
#define vl vector<long long>
#define vii vector<ii>
#define mp make_pair
#define gl(s) getline(cin , s)
#define max3(x, y, z) max(x,max(y,z))  
#define min3(x, y, z) min(x,min(y,z))
#define mmx INT_MAX 
#define mmn INT_MIN
#define all(v) v.begin(),v.end()
#define ll long long
using namespace std;

vi Union(100000) ,rank,size(100000,1);
int findSet(int x) {
	if(Union[x] == x) { return x; }
	else { return findSet(Union[x]); } 
}
void setUnion(int i ,int j) {
	int x = findSet(i);
	int y = findSet(j);
	if(x == y) return;
	if(rank[x] > rank[y]) {
		Union[y] = x;
	}
	else {
		Union[x] = y;
		if(rank[x] == rank[y]) {
			rank[y]++;
		}
	}
}
int main() {
	int N;
	int T;
	cin >> T; 
	while(T--) {
		rank.assign(100000,0);
		size.assign(100000,1);
		map<string, int> m;
		for(int i = 0; i <= 100010; i++) {
				Union[i] = i;
		}
		cin >> N;
		int i = 1;
		while(N--) {	 
			string str1="", str2 = "";
			cin >> str1 >>str2;
			if (!m[str1]) {m[str1] = i; i++;}
			if (!m[str2]) {m[str2] = i; i++;}
			int sz = 0;
			if(findSet(m[str1]) == findSet(m[str2])) {
				sz = size[findSet(m[str1])];
				
			}
			else sz = size[findSet(m[str1])] + size[findSet(m[str2])];
			setUnion(m[str1],m[str2]);
			size[findSet(m[str1])] = sz;
			
			size[findSet(m[str2])] = sz; 
			cout << sz << endl;
		}
		m.clear();
	}
	
	
}


