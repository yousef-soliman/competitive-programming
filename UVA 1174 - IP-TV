#include <iostream>
#include <string>
#include <cstdio>
#include <map>
#include <algorithm>
#include <stack>
#include <queue>
#include <sstream>
#include <utility>
#include <cmath>
#include <bitset>
#include <cstring>
#include <utility>
#include <set>
#include <cctype>
#include <list>
#include <climits>
#include <cstdlib>
#define ii pair<int,int>
#define psi pair<string,int>
#define vi vector<int>
#define vvi vector <vector<int> >
#define vvc vector <vector<char> >
#define vs vector<string>
#define vl vector<long long>
#define vii vector<ii>
#define mp make_pair
#define gl(s) getline(cin , s)
#define max3(x, y, z) max(x,max(y,z))  
#define min3(x, y, z) min(x,min(y,z))
#define mmx INT_MAX 
#define mmn INT_MIN
#define all(v) v.begin(),v.end()
typedef long long ll;
int dr_k[] = {1, 2 , -1, 2, -2, -2, 1, -1};
int dc_k[] = {2, 1, 2, -1, 1, -1, -2, -2};

using namespace std;
int dr[] = {1, -1, 0, 0, 1, 1, -1, -1};
int dc[] = {0, 0, 1, -1, 1, -1, 1, -1};
vector<vector<ii> > g;
vi taken;
priority_queue<ii> q;
void process(int u){
	taken[u] = 1;
	for(int i = 0; i < g[u].size();i++){
		if(!taken[g[u][i].first])
			q.push(mp(-g[u][i].second,-g[u][i].first));
	}
}
int main(){	
	int T,N,M;
	cin >> T;
	while(T--){
		cin >> N >> M;
		g.resize(N);
		taken.assign(N,0);
		map<string,int> m;
		vs v;
		string s,s1;
		int d;
		int c = 1;
		for(int i = 0 ; i < M; i++) {
			cin >> s >> s1 >> d;
			if(m[s] == 0){
				m[s] = c++;
				v.push_back(s);
			}
			if(m[s1] == 0){
				m[s1] = c++;
				v.push_back(s1);
			}
			ii p = mp(m[s1]-1,d);
			g[m[s]-1].push_back(p);
			p = mp(m[s]-1,d);
			g[m[s1]-1].push_back(p);
		}
		
		process(0);
		int mn = 0;
		while(!q.empty()){
			ii p = q.top();
			q.pop();
			int u = -p.first;
			int v = -p.second;
			if(!taken[v]){
				mn+=u;
				process(v);
			}
		}
		cout << mn << endl;
		if(T) cout << endl;
		g.clear();
		m.clear();
	}
	return 0;
}
