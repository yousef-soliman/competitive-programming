#include <iostream>
#include <string>
#include <cstdio>
#include <map>
#include <algorithm>
#include <stack>
#include <queue>
#include <sstream>
#include <utility>
#include <cmath>
#include <bitset>
#include <cstring>
#include <utility>
#include <set>
#include <cctype>
#include <list>
#include <climits>
#include <cstdlib>
#define ii pair<int,int>
#define psi pair<string,int>
#define vi vector<int>
#define vvi vector <vector<int> >
#define vvc vector <vector<char> >
#define vs vector<string>
#define vl vector<long long>
#define vii vector<ii>
#define mp make_pair
#define gl(s) getline(cin , s)
#define max3(x, y, z) max(x,max(y,z))  
#define min3(x, y, z) min(x,min(y,z))
#define mmx INT_MAX 
#define mmn INT_MIN
#define all(v) v.begin(),v.end()
typedef long long ll;
int dr_k[] = {1, 2 , -1, 2, -2, -2, 1, -1};
int dc_k[] = {2, 1, 2, -1, 1, -1, -2, -2};
int dr[] = {-1, 0, 0, 1, 1, 1, -1, -1};
int dc[] = {0, -1, 1, 0, 1, -1, 1, -1};
using namespace std;
char grid[12][12];
char tmp[12][12];
int cn[12][12] ={0};
vs g;
int cnt = 0;
void dfs(int r,int c){
	if(r >= g.size() || r < 0 || c >= g[0].size() || c < 0) return;
	if(g[r][c] == '1')return;
	cnt++;
	g[r][c] = '1';
	for(int i = 0;i < 4; i++){
		dfs(r+dr[i],c+dc[i]);
	}
}
int main(){	
	int T;
	cin >> T;
	string s,s1;
	int x,y;
	while(T--){
		cin >> s >> s1;
		x = atoi(s.c_str());
		y = atoi(s1.c_str());
		getchar();
		int l = 0;
		while(gl(s)){
			if(s.size() == 0) break;
			g.push_back(s);
		}
		dfs(x-1,y-1);
		cout << cnt << endl;
		if(T) cout << endl;
		g.clear();
		cnt = 0;
	}
	return 0;
}
