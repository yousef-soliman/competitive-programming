#include <iostream>
#include <string>
#include <cstdio>
#include <map>
#include <algorithm>
#include <stack>
#include <queue>
#include <sstream>
#include <utility>
#include <cmath>
#include <bitset>
#include <cstring>
#include <utility>
#include <set>
#include <cctype>
#include <list>
#define ii pair<int,int>
#define psi pair<string,int>
#define vi vector<int>
#define vii vector<ii>
#define pm make_pair
#define gl(s) getline(cin , s);
#define max3(x, y, z) max(x,max(y,z);  
#define min3(x, y, z) min(x,min(y,z);
#define mx INT_MAX  
#define mn INT_MIN  
using namespace std;
typedef long long ll;
vi v(28);
int find(int x) {
	if(v[x] == x) { return x; }
	else { return find(v[x]);}
}
void union_set(int x, int y) {
	int a = find(x);
	int b = find(y); 
	v[a] = b;
	
}
int main() {
	int T;
	char a, b;
	cin >> T;
	string s;
	getchar();
	while(T--) {
		bitset<26> bs(0);
		bitset<26> sol(0);
		for(int i = 0;i < 26;i++) {
			v[i] = i;
		}
		while(scanf("(%c,%c)\n",&a,&b)) {
			union_set(a-'A',b-'A');
			bs[a-'A']= 1;
			bs[b-'A']= 1;
			
		}
		gl(s);	
		gl(s);	
		int cnt = 0;
		int m = 0;
		for(int i = 0 ;i < s.size(); i+=2) {
			if(bs[s[i] - 'A']) {
				sol[find(s[i] - 'A')] = 1;
			}
			m++;
		}
		cnt = m - bs.count();
		int c = sol.count();
		printf("There are %d tree(s) and %d acorn(s).\n", c, cnt);
		v.clear();
	}
	return 0;
}


