#include <iostream>
#include <string>
#include <cstdio>
#include <map>
#include <algorithm>
#include <stack>
#include <queue>
#include <sstream>
#include <utility>
#include <cmath>
#include <bitset>
#include <cstring>
#include <utility>
#include <set>
#include <cctype>
#include <list>
#include <climits>
#include <cstdlib>
#define ii pair<int,int>
#define psi pair<string,int>
#define vi vector<int>
#define vvi vector <vector<int> >
#define vvc vector <vector<char> >
#define vs vector<string>
#define vl vector<long long>
#define vii vector<ii>
#define mp make_pair
#define gl(s) getline(cin , s)
#define max3(x, y, z) max(x,max(y,z))  
#define min3(x, y, z) min(x,min(y,z))
#define mmx INT_MAX 
#define mmn INT_MIN
typedef long long ll;
int dr[] = {1, 2 , -1, 2, -2, -2, 1, -1};
int dc[] = {2, 1, 2, -1, 1, -1, -2, -2};

using namespace std;
vvi graph;
vi vis;
vi low;
vi parent;
int dfsnum;
int cnt = 0;
int cntroot = 0;
int root = 0;
vi points;
void dfs(int u) {
	vis[u]=low[u] = dfsnum++;
	for(int i = 0; i < graph[u].size();i++){
		int v = graph[u][i];
		if(vis[v] == -1){
			parent[v] = u;
			if(u == root) cntroot++;
			dfs(v);
			if(low[v] >= vis[u]){
				points[u] = 1;
			}
			low[u] = min(low[v],low[u]);
		}
		else if( v != parent[u]){
			low[u] = min(low[u],vis[v]);
		}
	}
	
}
int main(){	
	int N;
	while(cin>> N && N){
		cnt = 0;
		int x,y;
		cntroot = 0;
		dfsnum = 0;
		graph.resize(N);
		vis.assign(N,-1);
		low.assign(N,0);
		parent.assign(N,0);
		points.assign(N,0);
		string s;
		getchar();
		while(gl(s)){
			if(s[0] == '0') {
				dfs(0);
				cnt = (cntroot>1);
				for(int i = 1;i < N; i++) {
					if(points[i]){
						cnt++;
					}
 				}
 				cout << cnt << endl;
				graph.clear();
				break;
			}
			stringstream ss;
			ss << s;
			
			ss >> x;
			while(ss >> y) {
				graph[x-1].push_back(y-1);
				graph[y-1].push_back(x-1);
			}
		}
	}
	return 0;
}
